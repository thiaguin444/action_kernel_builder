name: Build Kernel

on:
  workflow_dispatch:
    inputs:
      KERNEL_SOURCE:
        description: 'Kernel source URL'
        required: true
        default: 'https://github.com/thiaguin444/kernel_motorola_illinois'
      KERNEL_BRANCH:
        description: 'Kernel branch'
        required: true
        default: 'fushiguro-inline'
      KERNEL_NAME:
        description: 'Kernel/zip name'
        required: true
        default: 'perf'
      CONFIG_FILE:
        description: 'Config file (You can put multiple configs separated by space)'
        required: true
        default: 'vendor/odessa_defconfig vendor/debugfs.config'
      TOOLCHAIN_URL:
        description: "Clone URL of your toolchain"
        required: true
        default: 'https://github.com/XSans0/WeebX-Clang/releases/download/WeebX-Clang-20.0.0git-release/WeebX-Clang-20.0.0git.tar.gz'
      ANYKERNEL:
        description: "Clone URL of your AnyKernel"
        required: true
        default: 'https://github.com/thiaguin444/AnyKernel3.git'

jobs:
  Build_Kernel:
    runs-on: ubuntu-latest
    permissions: write-all
    defaults:
      run:
        shell: bash
        working-directory: ${{ github.workspace }}

    steps:
      - name: Set-up environment
        run: |
          rm -rf ${{ github.workspace }}/*
          sudo apt-get update
          sudo apt-get install -y build-essential bc libssl-dev libfl-dev
          sudo apt-get install -y curl git ftp lftp wget libarchive-tools ccache
          sudo apt-get install -y zip unzip tar gzip bzip2 rar unrar cpio jq

      - name: Cloning Kernel Source
        run: git clone --single-branch --depth=1 --no-tags ${{ github.event.inputs.KERNEL_SOURCE }} -b ${{ github.event.inputs.KERNEL_BRANCH }} ${{ github.workspace }}

      - name: Set-up Toolchain
        run: |
          if [[ "${{ github.event.inputs.TOOLCHAIN_URL }}" == *.tar.gz ]]; then
            wget -O clang-toolchain.tar.gz "${{ github.event.inputs.TOOLCHAIN_URL }}"
            mkdir -p ${{ github.workspace }}/toolchain
            tar -xzf clang-toolchain.tar.gz -C ${{ github.workspace }}/toolchain
            rm -f clang-toolchain.tar.gz
          else
            git clone --single-branch --depth=1 --no-tags ${{ github.event.inputs.TOOLCHAIN_URL }} ${{ github.workspace }}/toolchain
          fi

      - name: Start Compilation
        run: |
          objdir="${{ github.workspace }}/out"
          anykernel="${{ github.workspace }}/anykernel"
          clang_dir="${{ github.workspace }}/toolchain"
          kernel_name="${{ github.event.inputs.KERNEL_NAME }}"
          output_dir=${{ github.workspace }}/compiled

          export PATH="${clang_dir}/bin:$PATH"

          mkdir -p $output_dir

          make_defconfig() {
            start=$(date +"%s")
            make -s ARCH=arm64 O=${objdir} ${{ github.event.inputs.CONFIG_FILE }} -j$(nproc --all)
          }

          compile() {
            cd "${{ github.workspace }}"

            # Remover qualquer configuração com GCC, usar apenas Clang e LLVM
            make -j$(nproc --all) \
              O=${objdir} \
              ARCH=arm64 \
              CC=clang \
              AR=llvm-ar \
              LLVM_NM=llvm-nm \
              OBJCOPY=llvm-objcopy \
              LD=ld.lld \
              NM=llvm-nm \
              LLVM=1 \
              LLVM_IAS=1
          }

          completion() {
            cd "${objdir}"
            compiled_gz_image="arch/arm64/boot/Image.gz"
            compiled_dtbo="arch/arm64/boot/dtbo.img"
            qcom_dtb="arch/arm64/boot/dts/vendor/qcom"
            specific_dtb="${qcom_dtb}/sdmmagpie-odessa-base.dtb"

            if [[ -f ${compiled_gz_image} && -f ${compiled_dtbo} && -f ${specific_dtb} ]]; then
              git clone -q ${{ github.event.inputs.ANYKERNEL }} "$anykernel"

              cp -f "${compiled_gz_image}" "$anykernel/Image.gz" || true
              cp -f "${compiled_dtbo}" "$anykernel/dtbo.img" || true
              cp -f "${specific_dtb}" "$anykernel/dtb" || true

              cd "$anykernel"
              zip_name="CosmicFresh-${kernel_name}-$(date +"%d-%m-%Y-%H%M").zip"
              zip -r9 "$zip_name" META-INF version anykernel.sh tools Image.gz dtb dtbo.img

              mv -- "$zip_name" "$output_dir/$zip_name"

              rm -f Image.gz dtb dtbo.img
              rm -rf "$anykernel"

              end=$(date +"%s")
              diff=$((end - start))
              echo -e "BUILD COMPLETED IN ${diff} SECONDS"
            else
              echo "ERROR: Some output is missing!"
              exit 1
            fi
          }

          make_defconfig
          compile
          completion

          zip_file=$(find $output_dir -name 'CosmicFresh-${kernel_name}-*.zip' -print -quit)
          echo "ZIP_NAME=$(basename "$zip_file" .zip)" >> $GITHUB_ENV
          echo "RELEASE_DATE=$(date +'%B %-d, %Y %H:%M')" >> $GITHUB_ENV

        continue-on-error: false

      - name: Upload files to repository releases page
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ github.workspace }}/compiled/*
          name: ${{ env.ZIP_NAME }}
          tag_name: ${{ github.run_id }}
          body: |
            Released on ${{ env.RELEASE_DATE }}
